name: Auto Node Update
on:
  schedule:
    - cron: '30 0 * * *'  # 北京时间8:30
  push:
    branches: [main]
    paths:
      - 'dist/GH-AC-main.py'
      - '.github/workflows/python-script.yml'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '更新了')"
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Verify Files
      run: |
        echo "仓库文件列表:"
        ls -l
        echo "检查必要文件:"
        if [ ! -f GAll.txt ]; then
          echo "::error::缺少 GAll.txt"
          exit 1
        fi
        if [ ! -f AddIP.txt ]; then
          echo "::error::缺少 AddIP.txt"
          exit 1
        fi

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        sudo apt-get install -y jq

    - name: Execute Script
      run: |
        python dist/GH-AC-main.py
        cat node_stats.json  # 输出 node_stats.json 文件的内容，便于调试
        echo "STATS_JSON=$(cat node_stats.json | jq -c .)" >> $GITHUB_ENV

    - name: Commit Changes and Send Notifications
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}  # 从 GitHub Secrets 获取
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}  # 从 GitHub Secrets 获取
      run: |
        echo "STATS_JSON: $STATS_JSON"
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:$GH_TOKEN@github.com/${{ github.repository }}
        
        # 从 STATS_JSON 中提取 UTC 时间戳并转换为北京时间
        utc_timestamp=$(echo "$STATS_JSON" | jq -r '.timestamp')
        beijing_timestamp=$(date -u -d "$utc_timestamp 8 hours" '+%Y-%m-%d %H:%M:%S')
        echo "Beijing Timestamp: $beijing_timestamp"

        # 构建 Telegram 推送消息
        message="✨ *节点更新报告* ✨\n📡 *系统时间*: ${beijing_timestamp}\n\`\`\`\n"
        while IFS= read -r filename; do
          line_count=$(echo "$STATS_JSON" | jq -r ".stats.\"$filename\"")
          if [ -n "$line_count" ]; then
            message="${message}${filename}: 更新了 ${line_count} 个节点\n"
          fi
          
          # Git 提交
          git add "$filename" || echo "文件 $filename 未找到，跳过添加"
          commit_msg="更新了 ${line_count} 个节点 北京时间 ${beijing_timestamp}"
          git commit -m "$commit_msg" --allow-empty || echo "提交 $filename 失败，可能是无变更"
        done < <(echo "$STATS_JSON" | jq -r '.stats | keys_unsorted[]')
        message="${message}\`\`\`"

        # 调试：输出最终消息
        echo "Telegram Message:"
        echo -e "$message"

        # 如果消息为空，记录错误
        if [ -z "$message" ]; then
          echo "错误：推送消息为空，检查 node_stats.json 是否正确生成"
          exit 1
        fi

        # 发送 Telegram 推送（使用 Markdown 格式）
        curl -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
          -d "chat_id=${TELEGRAM_CHAT_ID}&text=$(echo -e "$message")&parse_mode=Markdown" || echo "Telegram 推送失败，请检查 Token 或 Chat ID"
        
        # 推送 Git 变更
        git push origin main || echo "推送失败，请检查日志"
