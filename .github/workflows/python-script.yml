name: Run Python Script

on:
  schedule:
    - cron: '0 17 * * *'  # 定时任务：每天北京时间凌晨1点 (UTC 时间：17:00)
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  run_script:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # 安装依赖库，从 requirements.txt 中自动读取（如果文件存在）
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # 运行 Python 脚本并捕获输出
    - name: Run Python script
      id: run_python
      run: |
        # 运行 Python 脚本并捕获输出
        python_output=$(python dist/GH-AC-main.py)
        
        # 清理输出中的特殊字符，以便 GitHub 环境变量可以正常接收
        clean_output=$(echo "$python_output" | sed 's/[() ]//g')  # 去掉括号和空格
        echo "REPLACED_NODES_COUNT=$clean_output" >> $GITHUB_ENV

    # 创建动态推送消息
    - name: Create push message
      id: push_message
      run: |
        # 获取当前的北京时间
        current_datetime=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')

        # 根据替换的节点数生成推送消息
        if [[ "${{ env.REPLACED_NODES_COUNT }}" != "null" && "${{ env.REPLACED_NODES_COUNT }}" != "" ]]; then
          message="更新 ${{ env.REPLACED_NODES_COUNT }} 个节点 ($current_datetime)"
        else
          message="运行脚本完毕，无新节点替换 ($current_datetime)"
        fi

        # 将推送消息存入环境变量
        echo "message=$message" >> $GITHUB_ENV
        echo "${{ env.message }}"  # 打印生成的推送消息以便调试

    # 提交并推送到仓库（忽略没有更改时的错误）
    - name: Commit and push result
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git
        git add .
        git commit -m "${{ env.message }}" || echo "Nothing to commit"
        git push
