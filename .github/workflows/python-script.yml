name: Run Python Script

on:
  schedule:
    - cron: '0 17 * * *'  # 每天 UTC 时间 17:00 运行（北京时间 01:00）
  push:
    branches:
      - main  # 监听 main 分支的代码提交
    paths:
      - ".github/workflows/python-script.yml"  # 仅监听 yml 变更
  workflow_dispatch:  # 允许手动触发

jobs:
  run_script:
    if: github.event_name != 'push' || github.event.head_commit.modified[0] == '.github/workflows/python-script.yml'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Python script and capture output
      id: run_script
      run: |
        output=$(python dist/GH-AC-main.py)
        echo "$output"
        cleaned_output=$(echo "$output" | grep -E '更新.*节点')
        echo "log_output<<EOF" >> $GITHUB_ENV
        echo "$cleaned_output" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Format and push the result
      id: format_push
      run: |
        current_datetime=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')
        
        # 使用 echo EOF 避免 GitHub Actions 解析错误
        {
          echo "formatted_message<<EOF"
          while IFS= read -r line; do
            if [[ "$line" == *"更新"* ]]; then
              echo "$line (${current_datetime})"
            fi
          done <<< "${{ env.log_output }}"
          echo "EOF"
        } >> $GITHUB_ENV

    - name: Commit and push result
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git
        
        git add . -- ':!GAll.txt'  # 避免 GAll.txt 被提交
        
        while IFS= read -r line; do
          file=$(echo "$line" | awk '{print $1}')  # 获取文件名
          node_count=$(echo "$line" | grep -oP '\d+(?= 个节点)')  # 提取节点数
          if [[ -n "$file" && -n "$node_count" ]]; then
            git commit -m "$file 更新了 $node_count 个节点 (${current_datetime})" || echo "Nothing to commit"
            git push || echo "Push failed, retrying..."
          fi
        done <<< "${{ env.formatted_message }}"
