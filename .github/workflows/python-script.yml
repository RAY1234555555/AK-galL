name: Run Python Script

on:
  schedule:
    - cron: '0 17 * * *'  # 每天定时任务（北京时间凌晨1点，UTC时间17:00）
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  run_script:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Python script and capture output
      id: run_script
      run: |
        # 运行 Python 脚本并捕获输出
        output=$(python dist/GH-AC-main.py)
        
        # 输出日志以便调试
        echo "$output"
        
        # 过滤符合格式的 "更新（行数）个节点（北京时间）" 记录
        cleaned_output=$(echo "$output" | grep -E '更新 [0-9]+ 个节点')

        # 将过滤后的日志存入环境变量
        echo "log_output<<EOF" >> $GITHUB_ENV
        echo "$cleaned_output" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Format and push the result
      id: format_push
      run: |
        current_datetime=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')
        message=""

        # 读取环境变量内容
        while IFS= read -r line; do
          # 仅保留 "更新（行数）个节点（北京时间）" 格式的信息
          if [[ "$line" == *"更新"* ]]; then
            message="${message}${line} (${current_datetime})\n"
          fi
        done <<< "${{ env.log_output }}"

        # 如果 message 为空，则设置默认信息
        if [[ -z "$message" ]]; then
          message="自动更新 GAll 文件 (${current_datetime})"
        fi

        # 设置环境变量，供后续步骤使用
        echo "formatted_message=$message" >> $GITHUB_ENV

    - name: Commit and push result
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git
        
        # 提交和推送
        git add .
        git diff --cached --quiet || git commit -m "${{ env.formatted_message }}"
        git push || echo "Nothing to push"
