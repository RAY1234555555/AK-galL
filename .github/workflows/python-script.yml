name: Run Python Script

on:
  schedule:
    - cron: '0 17 * * *'  # 每天定时任务（北京时间凌晨1点，UTC时间17:00）
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  run_script:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Python script and capture output
      id: run_script
      run: |
        # 捕获 python 脚本输出
        output=$(python dist/GH-AC-main.py)
        
        # 输出日志以便调试
        echo "$output"
        
        # 清理不需要的日志部分，仅保留生成文件更新信息
        # 移除 Git diff 提交信息等，确保只输出 GAll 更新的信息
        cleaned_output=$(echo "$output" | grep -E '更新.*节点')

        # 将清理后的输出保存为环境变量
        echo "log_output=$cleaned_output" >> $GITHUB_ENV

    - name: Format and push the result
      id: format_push
      run: |
        current_datetime=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')
        message=""

        # 获取并构建消息
        while IFS= read -r line; do
          # 格式化节点更新信息，查找更新的行
          if [[ "$line" == *"更新"* ]]; then
            message="${message}${line} (${current_datetime})\n"
          fi
        done <<< "${{ env.log_output }}"
        
        # 如果消息非空，则将格式化后的消息保存到环境变量
        echo "formatted_message=$message" >> $GITHUB_ENV

    - name: Commit and push result
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git
        
        # 提交和推送
        git add .
        git commit -m "${{ env.formatted_message }}" || echo "Nothing to commit"
        git push
